quarkus.application.name                                            = test-avro-kafka-companion
# Enable snappy
quarkus.kafka.snappy.enabled                                        = true
kafka.compression.type                                              = snappy
kafka.max.request.size                                              = 2097152
kafka.apicurio.registry.auto-register                               = true
quarkus.kafka.devservices.port                                      = 32932
quarkus.apicurio-registry.devservices.port                          = 42932

# Incoming coverage message
mp.messaging.incoming.test-in.connector                             = smallrye-kafka
mp.messaging.incoming.test-in.topic                                 = dev-in
mp.messaging.incoming.test-in.auto.offset.reset                     = earliest
mp.messaging.incoming.test-in.group.id                              = ${quarkus.application.name}-consumer
mp.messaging.incoming.test-in.auto.register.schemas                 = true

# Handle value deserialization failures
mp.messaging.incoming.test-in.value-deserialization-failure-handler = failure-dead-letter

# Handle processing failures
mp.messaging.incoming.test-in.failure-strategy                      = dead-letter-queue
mp.messaging.incoming.test-in.dead-letter-queue.topic               = dlq-out
mp.messaging.incoming.test-in.dead-letter-queue.producer-client-id  = coverage-processor


# set the topic name for the channel to graph-merge
mp.messaging.outgoing.test-out.connector                            = smallrye-kafka
mp.messaging.outgoing.test-out.topic                                = dev-out
mp.messaging.outgoing.test-out.value.serializer                  = io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.test-out.auto.register.schemas                = true
mp.messaging.outgoing.test-out.specific.avro.reader                 = true

# DLQ Producer
mp.messaging.outgoing.dead-letter.connector                             = smallrye-kafka
mp.messaging.outgoing.dead-letter.topic                                 = dlq-out
mp.messaging.outgoing.dead-letter.value.serializer                      = io.quarkus.kafka.client.serialization.ObjectMapperSerializer
